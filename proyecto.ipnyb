def Puntaje(t):
    """
    Calcula el puntaje de un estado de triki.
    Devuelve 1 si el jugador 'X' gana, -1 si 'O' gana, y 0 en caso de empate o estado no terminal.
    """
    board = t.root().element()  # Obtener el tablero desde la raíz del árbol

    # Función auxiliar para verificar si hay un ganador
    def check_winner(board):
        for i in range(3):
            if board[i][0] == board[i][1] == board[i][2] != "":
                return board[i][0]
            if board[0][i] == board[1][i] == board[2][i] != "":
                return board[0][i]
        if board[0][0] == board[1][1] == board[2][2] != "":
            return board[0][0]
        if board[0][2] == board[1][1] == board[2][0] != "":
            return board[0][2]
        return None

    winner = check_winner(board)
    if winner == "X":
        return 1  # El jugador A (X) gana
    elif winner == "O":
        return -1  # El jugador B (O) gana
    else:
        return 0  # Empate o no hay un ganador aún

def Siguiente_Movimiento(t):
    """
    Calcula uno de los mejores movimientos siguientes para el jugador A ('X').
    """
    current_board = t.root().element()  # Obtener el tablero actual desde la raíz
    playerA = "X"
    playerB = "O"

    # Generar los posibles hijos del nodo actual (las posibles jugadas)
    def posibles_hijos(t, player):
        hijos = []
        root = t.root()
        for i in range(3):
            for j in range(3):
                if current_board[i][j] == "":
                    # Crear una nueva copia del tablero y aplicar la jugada
                    new_board = [row[:] for row in current_board]
                    new_board[i][j] = player
                    # Crear un nuevo árbol con el nuevo estado del tablero
                    child_tree = LinkedTree()
                    child_tree.add_root(new_board)
                    hijos.append(child_tree)
        return hijos

    # Aplicar minimax para elegir el mejor movimiento
    def minimax(t, is_maximizing):
        if not posibles_hijos(t, playerA):  # Si no hay más movimientos posibles
            return Puntaje(t)

        if is_maximizing:
            max_eval = float('-inf')
            for child in posibles_hijos(t, playerA):
                eval = minimax(child, False)
                max_eval = max(max_eval, eval)
            return max_eval
        else:
            min_eval = float('inf')
            for child in posibles_hijos(t, playerB):
                eval = minimax(child, True)
                min_eval = min(min_eval, eval)
            return min_eval

    # Generar los posibles movimientos y evaluar el mejor
    best_move = None
    best_score = float('-inf')
    for child in posibles_hijos(t, playerA):
        score = minimax(child, False)
        if score > best_score:
            best_score = score
            best_move = child

    return best_move

# Ejemplo de uso:
t = LinkedTree()
t.add_root([["X", "O", "X"], ["O", "X", "O"], ["", "", ""]])
print(Puntaje(t))  # Debería devolver el puntaje del estado actual
next_move = Siguiente_Movimiento(t)
print(next_move.root().element())  # Debería devolver el mejor movimiento siguiente

